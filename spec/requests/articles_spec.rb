require 'rails_helper'
extend ActiveModel::Model

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/articles", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Article. As you add validations to Article, be sure to
  # adjust the attributes here as well.
  let(:valid_article) {
    Article.create!(title: "this is title", body: "this is a body text")
  }

  let(:valid_article1) {
    Article.new(title: "this is a title", body: "this a body text of anything")
  }

  let(:invalid_article) {
    Article.create!(body: "this is a body's text")
  }
   
  describe "GET /index" do
   #==============  done  =======================
    it "renders a successful response" do
      valid_article
      get articles_url
      expect(response).to be_successful
    end
  end
   #==============  done  =======================
  describe "GET /show" do
    it "renders a successful response" do
      article = valid_article
      get article_url(article)
      expect(response).to be_successful
    end
  end
   #==============  done  =======================
  describe "GET /new" do
    it "renders a successful response" do
      get new_article_url
      expect(response).to be_successful
    end
  end
   #==============  done  =======================
  describe "GET /edit" do
    it "renders a successful response" do
      article = valid_article
      get edit_article_url(article)
      expect(response).to be_successful
    end
  end
   #==============  done  =======================
  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Article" do
        get "/articles/new"
        expect(response).to render_template(:new)
      end

   #==============  done  =======================
      it "redirects to the created article" do
        # post articles_url, params: { article: valid_article }
        expect {post articles_url, params: { article: valid_article } }.to change(Article, :count).by(1)        
        # expect(response).to be_successful
      end
    end

    #==============  done  =======================
    context "with invalid parameters" do
      it "does not create a new Article and raise error RecordInvalid" do
        expect {
          post articles_url, params: { article: invalid_article }
        }.to raise_error ActiveRecord::RecordInvalid
      end

    #==============  done  =======================
      it "renders a response with error RecordInvalid)" do
        expect {
          post articles_url, params: { article: invalid_article }
        }.to raise_error ActiveRecord::RecordInvalid
      end
    
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        Article.create!(title: "Ruby is title", body: "this is a body of ruby title")
      }

      let(:new_attributes1) {
        Article.new(title: "Ruby is title", body: "this is a body of ruby title")
      }

    #==============  done  =======================
      it "updates the requested article" do
        article = Article.create! new_attributes1.attributes
        patch article_url(article), params: { article: new_attributes }
        article.reload
      end

#==============  done  ======================= 
     it "redirects to the article" do
        article = Article.create! new_attributes1.attributes
        patch article_url(article), params: { article: new_attributes1 }
        article.reload
        expect(response).to redirect_to(article_url(article))
      end
    end

    context "with invalid parameters" do
    
#==============  done  =======================  
      it "renders a response with error RecordInvalid)" do
        article = Article.create! valid_article1.attributes
        expect {
          patch article_url(article), params: { article: invalid_article } 
        }.to raise_error ActiveRecord::RecordInvalid
      end
    end
  end

#==============  done  =======================  
  describe "DELETE /destroy" do
    it "destroys the requested article" do
      article = Article.create! valid_article1.attributes
      expect {
        delete article_url(article)
      }.to change(Article, :count).by(-1)
    end

#==============  done  ======================= 
    it "redirects to the articles list" do
      article = Article.create!  valid_article1.attributes
      delete article_url(article)
      expect(response).to redirect_to("/")
    end
  end
end
